xlab('Country')+
ylab('Revenue generated')
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/100000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = paste(substitute(bold('Top Revenue Generating regions Excluding the UK'))))+
xlab('Country')+
ylab('Revenue generated')
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/100000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = paste(substitute(bold('Top Revenue Generating regions Excluding the UK'))))+
xlab('Country')+
ylab('Revenue generated')
ggplotly(top_countries)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions')+
xlab('Country')+
ylab('Revenue generated')+
theme(plot.title = element_text(face = 'bold'))
ggplotly(least_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/1000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK')+
xlab('Country')+
ylab('Revenue generated')
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/1000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK')+
xlab('Country')+
ylab('Revenue generated')+
theme(plot.title = element_text(face = 'bold'))
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK')+
xlab('Country')+
ylab('Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'))
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK')+
xlab('Country')+
ylab('Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis..title.x = element_text(face = 'bold'),
axis..title.y = element_text(face = 'bold'))
ggplotly(top_countries)
?labs
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK',
x = 'Country',
y = 'Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis..title.x = element_text(face = 'bold'),
axis..title.y = element_text(face = 'bold'))
ggplotly(top_countries)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK',
x = 'Country',
y = 'Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
ggplotly(top_countries)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions')+
xlab('Country')+
ylab('Revenue generated')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
ggplotly(least_countries)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions',
x = 'Country',
y ='Revenue generated') +
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions',
x = 'Country',
y ='Revenue generated') +
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
region_performance <- grid.arrange(top_countries, least_countries, ncol = 2)
ggplotly(region_performance)
?grob
tc <- ggplotly(top_countries)
lc <- ggplotly(least_countries)
subplot(tc, lc, ncol = 1)
subplot(tc, lc, ncol = 2)
subplot(tc, lc, nrows = 1)
?subplot()
subplot(tc, lc, nrows = 1)
subplot(tc, lc, nrows = 1, titleX = 'Top Revenue Generating Regions ', titleY = 'Least Revenue Generating Regions')
subplot(tc, lc, nrows = 1, titleX = 'Top Revenue Generating Regions ', titleY = 'Least Revenue Generating Regions')
subplot(tc, lc, nrows = 1,
titleX = "Top Revenue Generating Regions"
titleY = "Least Revenue Generating Regions")
subplot(tc, lc, nrows = 1,
titleX = "Top Revenue Generating Regions",
titleY = "Least Revenue Generating Regions")
subplot(tc, lc, nrows = 1,
titleX = "tc",
titleY = "lc")
subplot(tc, lc, nrows = 1,
titleX = "lc",
titleY = "tc")
subplot(tc, lc, nrows = 1, titleX = "tc")
subplot(tc, lc, nrows = 1, titleX = "Top Revenue Generating Regions", titleY = "Least Revenue Generating Regions")
subplot(tc, lc, nrows = 1)
subplot(tc, lc, nrows = 1, titleX = "Top Revenue Generating Regions")
subplot(tc, lc, nrows = 1, titleX = 'man')
subplot(tc, lc, nrows = 1, titleX = 'man')
subplot(tc, lc, nrows = 1, titleX = 'man')
subplot(tc, lc, nrows = 1, titleY = 'man')
subplot(tc, lc, nrows = 1, titleY = 'man')
# Extracting months and dates from the posixt invoice date
online_store <- online_store %>%
mutate(month_num = as.integer(format(InvoiceDate, format ='%m')),
year = factor(format(InvoiceDate, format = '%Y'),
levels = c(2010, 2011)),
month = factor(month.abb[month_num],
levels = c('Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep',
'Oct', 'Nov', 'Dec'))
)
monthly_revenue <- online_store %>%
select(month, year, Revenue) %>%
group_by(year, month) %>%
summarize(total_revenue = sum(Revenue),
average_revenue = mean(Revenue),) %>%
mutate(percent_change = (total_revenue - lag(total_revenue))/lag(total_revenue) * 100,
month_num = as.integer(month))
mnth_chn <- ggplot(monthly_revenue, aes(month, percent_change))+
geom_bar(aes(fill = month),
na.rm = T,
stat = 'identity')
mnth_chn
mnth_chn
top_10_cp %>% top_n(10, wt = total_Revenue)
top_10_cp <- cp %>% top_n(10, wt = total_Revenue)
## Customers
cp <- online_store %>%
select(CustomerID, Revenue) %>%
filter(!is.na(CustomerID)) %>%
group_by(CustomerID) %>%
summarize(number_of_purchase = length(CustomerID),
total_purchase = sum(Revenue)) # This returns all the revenue generated from each customers and the number of times they made a purchase
top_10_cp <- cp %>% top_n(10, wt = total_Revenue)
top_10_cp <- cp %>% top_n(10, wt = total_purchase)
length(cp$CustomerID)/length(top_10_cp$CustomerID)
length(top_10_cp$CustomerID)/length(cp$CustomerID)
top_10_cp <- cp %>% top_n(10, wt = total_purchase)
# To get the top 10 customers that spent the most
top_10_cp %>% ggplot(aes(CustomerID, y = total_purchase/100000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
) +
xlab('Customer ID')+
ylab('Amount spent in 100000')
# To get the top 10 customers that spent the most
ggplotly(top_10_cp %>% ggplot(aes(CustomerID, y = total_purchase/100000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
) +
xlab('Customer ID')+
ylab('Amount spent in 100000'))
# To get the top 10 customers that spent the most
tp_10_customer<- top_10_cp %>%
ggplot(aes(reorder(CustomerID, total_purchase/10000), y = total_purchase/10000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
x = 'Customer ID',
y = 'Amount spent in ten thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.line.y = element_text(face = bold))
# To get the top 10 customers that spent the most
tp_10_customer<- top_10_cp %>%
ggplot(aes(reorder(CustomerID, total_purchase/10000), y = total_purchase/10000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
x = 'Customer ID',
y = 'Amount spent in ten thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.line.y = element_text(face = 'bold'))
ggplotly(tp_10_customer)
# To get the top 10 customers that spent the most
tp_10_customer<- top_10_cp %>%
ggplot(aes(reorder(CustomerID, total_purchase/10000), y = total_purchase/10000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
x = 'Customer ID',
y = 'Amount spent in ten thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
ggplotly(tp_10_customer)
# Amount generated from customers with more than one order
online_store %>% select(CustomerID, Revenue) %>%
filter(length(CustomerID)>1) %>%
summarize(revenue = sum(Revenue))
library(rmarkdown)
# Importing libraries
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(gridExtra)
library(plotly)
# Setting working directory
setwd('C:/Users/aduol/Documents/Personal/Online_retail_store/Online Retail Store')
# to replicate this project, use your device directory here, in the format setwd('C:/users/myworkingdirectory')
#importing data
online_store <- read_excel('Online Retail.xlsx')
str(online_store)
#saving the file in csv format to reduce processing time by R
write.csv(
online_store,
'C:/Users/aduol/Documents/Personal/Online_retail_store/Online Retail Store/online_store.csv',
row.names = F)
#loading data again
online_store <- read.csv('online_store.csv')
head(online_store) #to get a quick preview of the table
summary(online_store)
str(online_store)
online_store$CustomerID <- as.factor(online_store$cCustomerID)# changing data types
head(online_store) #to get a quick preview of the table
summary(online_store)
str(online_store)
#online_store$CustomerID <- as.factor(online_store$cCustomerID)# changing data types
# The POSIXct data type for InvoiceDate have been changed to character when file was converted.
online_store <- online_store %>%
mutate(InvoiceDate = as.POSIXct(InvoiceDate, format = "%Y-%m-%d %H:%M:%S")) # Changing character type to Posixct
head(online_store) #to get a quick preview of the table
summary(online_store)
str(online_store)
online_store$CustomerID <- as.factor(online_store$CustomerID)# changing data types
# The POSIXct data type for InvoiceDate have been changed to character when file was converted.
online_store <- online_store %>%
mutate(InvoiceDate = as.POSIXct(InvoiceDate, format = "%Y-%m-%d %H:%M:%S")) # Changing character type to Posixct
# We need to estimate the revenue generated first before estimating revenue per region
online_store <- online_store %>%
mutate(Revenue = UnitPrice * Quantity)
regional_sales <- online_store %>%
select(Country, Revenue, CustomerID) %>%
filter(Country != 'United Kingdom') %>%
group_by(Country) %>%
summarize(total_revenue = sum(Revenue),
average_revenue = mean(Revenue) #Estimates of the revenue per region
)
# Estimating the 10 highest earning regions
top_10 <- regional_sales %>% top_n(10, wt = total_revenue)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK',
x = 'Country',
y = 'Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
# Estimating the 10 lowest revenue generating regions
bottom_10 <- regional_sales %>% top_n(-10, total_revenue)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions',
x = 'Country',
y ='Revenue generated') +
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
lc <- ggplotly(least_countries),
# Estimating the 10 highest earning regions
top_10 <- regional_sales %>% top_n(10, wt = total_revenue)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK',
x = 'Country',
y = 'Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
# Estimating the 10 lowest revenue generating regions
bottom_10 <- regional_sales %>% top_n(-10, total_revenue)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions',
x = 'Country',
y ='Revenue generated') +
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
lc <- ggplotly(least_countries)
tc <- ggplotly(top_countries)>
lc
# Estimating the 10 highest earning regions
top_10 <- regional_sales %>% top_n(10, wt = total_revenue)
top_countries <- ggplot(top_10,
aes(reorder(Country, total_revenue),
total_revenue/10000))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Top Revenue Generating regions Excluding the UK',
x = 'Country',
y = 'Revenue generated in tens of thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
# Estimating the 10 lowest revenue generating regions
bottom_10 <- regional_sales %>% top_n(-10, total_revenue)
least_countries <- ggplot(bottom_10,
aes(reorder(Country, total_revenue),
total_revenue))+
geom_bar(aes(fill = Country),
stat = 'identity')+
labs(title = 'Least Revenue Generating regions',
x = 'Country',
y ='Revenue generated') +
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
lc <- ggplotly(least_countries)
tc <- ggplotly(top_countries)
lc
tc
# For this analysis we need to extract the months and date from InvoiceDate
online_store <- online_store %>%
mutate(month_num = as.integer(format(InvoiceDate, format ='%m')),
year = factor(format(InvoiceDate, format = '%Y'),
levels = c(2010, 2011)),
month = factor(month.abb[month_num],
levels = c('Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep',
'Oct', 'Nov', 'Dec'))
monthly_revenue <- online_store %>%
# For this analysis we need to extract the months and date from InvoiceDate
online_store <- online_store %>%
mutate(month_num = as.integer(format(InvoiceDate, format ='%m')),
year = factor(format(InvoiceDate, format = '%Y'),
levels = c(2010, 2011)),
month = factor(month.abb[month_num],
levels = c('Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep',
'Oct', 'Nov', 'Dec'))
monthly_revenue <- online_store %>%
# For this analysis we need to extract the months and date from InvoiceDate
online_store <- online_store %>%
mutate(month_num = as.integer(format(InvoiceDate, format ='%m')),
year = factor(format(InvoiceDate, format = '%Y'),
levels = c(2010, 2011)),
month = factor(month.abb[month_num],
levels = c('Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep',
'Oct', 'Nov', 'Dec')))
monthly_revenue <- online_store %>%
select(month, year, Revenue) %>%
group_by(year, month) %>%
summarize(total_revenue = sum(Revenue),
average_revenue = mean(Revenue),) %>%
mutate(percent_change = (total_revenue - lag(total_revenue))/lag(total_revenue) * 100,
month_num = as.integer(month))
ggplot(monthly_revenue, aes(month, percent_change))+
geom_bar(aes(fill = month),
na.rm = T,
stat = 'identity')
mnth_chn <- ggplot(monthly_revenue, aes(month, percent_change))+
geom_bar(aes(fill = month),
na.rm = T,
stat = 'identity')
ggplotly(mnth_chn)
# For this analysis we need to extract the months and date from InvoiceDate
online_store <- online_store %>%
mutate(month_num = as.integer(format(InvoiceDate, format ='%m')),
year = factor(format(InvoiceDate, format = '%Y'),
levels = c(2010, 2011)),
month = factor(month.abb[month_num],
levels = c('Jan', 'Feb', 'Mar',
'Apr', 'May', 'Jun',
'Jul', 'Aug', 'Sep',
'Oct', 'Nov', 'Dec')))
monthly_revenue <- online_store %>%
select(month, year, Revenue) %>%
group_by(year, month) %>%
summarize(total_revenue = sum(Revenue),
average_revenue = mean(Revenue),) %>%
mutate(percent_change = (total_revenue - lag(total_revenue))/lag(total_revenue) * 100,
month_num = as.integer(month))
mnth_chn <- ggplot(monthly_revenue, aes(month, percent_change))+
geom_bar(aes(fill = month),
na.rm = T,
stat = 'identity')
ggplotly(mnth_chn)
mnth_in <- ggplot(monthly_revenue, aes(month, total_revenue)) +
geom_bar(aes(fill = year),stat = 'identity') +
scale_fill_manual(values = c('lightgreen', 'darkgreen'))
ggplotly(mnth_in)
cp <- online_store %>%
select(CustomerID, Revenue) %>%
filter(!is.na(CustomerID)) %>%
group_by(CustomerID) %>%
summarize(number_of_purchase = length(CustomerID),
total_purchase = sum(Revenue)) # This returns all the revenue generated from each customers and the number of times they made a purchase
# To get the top 10 customers that spent the most
top_10_cp <- cp %>% top_n(10, wt = total_purchase)
tp_10_customer<- top_10_cp %>%
ggplot(aes(reorder(CustomerID, total_purchase/10000), y = total_purchase/10000, fill = CustomerID)) +
geom_bar(stat =  'identity')+
labs(title = 'Top spending customers',
x = 'Customer ID',
y = 'Amount spent in ten thousands')+
theme(plot.title = element_text(face = 'bold'),
axis.title.x = element_text(face = 'bold'),
axis.title.y = element_text(face = 'bold'))
ggplotly(tp_10_customer)
top_10_cp$CustomerID
# Proportion of top customers in the total purchase
sum(top_10_cp$total_purchase)/sum(online_store$Revenue) * 100
install.packages('prettydoc')
library(prettydoc)
# Importing libraries
library(tidyverse)
library(readxl)
library(rnaturalearth)
library(gridExtra)
library(plotly)
# Setting working directory
setwd("C:/Users/aduol/Documents/Personal/Online_retail_store/online_retail_store_project/")
# to replicate this project, use your device directory here, in the format setwd('C:/users/myworkingdirectory')
#importing data
online_store <- read_excel('Online Retail.xlsx')
#saving the file in csv format to reduce processing time by R
write.csv(
online_store,
"C:/Users/aduol/Documents/Personal/Online_retail_store/online_retail_store_project/online_store.csv',
row.names = F)
#loading data again
online_store <- read.csv('online_store.csv')
# Setting working directory
setwd("C:/Users/aduol/Documents/Personal/Online_retail_store/online_retail_store_project/")
# to replicate this project, use your device directory here, in the format setwd('C:/users/myworkingdirectory')
#importing data
online_store <- read_excel('Online Retail.xlsx')
#saving the file in csv format to reduce processing time by R
write.csv(online_store,
"C:/Users/aduol/Documents/Personal/Online_retail_store/online_retail_store_project/online_store.csv",
row.names = F)
#loading data again
online_store <- read.csv('online_store.csv')
